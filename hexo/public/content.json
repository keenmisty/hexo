{"meta":{"title":"南村新造","subtitle":"苟利国家生死以，岂因祸福避趋之","description":"没有什么是一顿烧烤不能解决的，如果有那就两顿烧烤解决。","author":"偿酩","url":"http://keenmisty.github.io","root":"/"},"pages":[{"title":"关于","date":"2016-01-26T07:57:32.000Z","updated":"2020-01-03T08:27:56.076Z","comments":true,"path":"about/index.html","permalink":"http://keenmisty.github.io/about/index.html","excerpt":"","text":"About Me暨南大学环境与气候研究院 讲师Lecturer in Institute for Environment and Climate Research of Jinan University Personal: Address: No. 855, Xing Ye Ave, Guangzhou, China, 511443 E-mail: changming#email.jnu.edu.cn Education: 2012-2016: Ph.D. Environmental Sciences Sun Yat-sen University 2009-2012: M.S. Environmental Sciences Yantai University 2005-2009: B.S. Environmental Sciences Yantai University Focus on: Land Surface Process Air Pollutant Deposition Modeling Geographic Information System Application Urbanization Environmental Chemistry Skills: WRF-Chem: run,modify,analysis EMEP: run,test,modify ArcGIS: mapping,spatial analysis,write arcpy scripts Fortran: read,modify,write subroutines Shell: write bash/csh scripts NCL: write automatic forecast scripts MATLAB: analysis data,draw figures Python: use to do languages adhesion Other Programs: GDAL, ENVI, AutoCAD, LabView, LaTeX, R, etc. Other Things:可能具有促使周围五十米内产生情侣的光环(效果验证中)…"},{"title":"所有分类","date":"2020-01-03T06:25:44.691Z","updated":"2020-01-03T06:25:44.691Z","comments":true,"path":"categories/index.html","permalink":"http://keenmisty.github.io/categories/index.html","excerpt":"","text":""},{"title":"大佬们","date":"2020-01-03T06:19:55.649Z","updated":"2020-01-03T06:19:55.642Z","comments":true,"path":"links/index.html","permalink":"http://keenmisty.github.io/links/index.html","excerpt":"","text":""},{"title":"","date":"2020-01-03T06:26:38.185Z","updated":"2020-01-03T06:26:38.185Z","comments":true,"path":"mylist/index.html","permalink":"http://keenmisty.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-01-03T06:26:10.207Z","updated":"2020-01-03T06:26:10.207Z","comments":true,"path":"tags/index.html","permalink":"http://keenmisty.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"只争朝夕，不负韶华","slug":"20200103-saysth","date":"2020-01-03T08:32:46.000Z","updated":"2020-01-06T01:24:06.176Z","comments":true,"path":"2020/01/03/20200103-saysth/","link":"","permalink":"http://keenmisty.github.io/2020/01/03/20200103-saysth/","excerpt":"","text":"2020年的第一个周五，捣鼓了一整个下午，终于恢复了对自己GitHub的pull/push操作能力。由此可见我的coding能力下降了多少，每天被报告、报表、事务、跑腿所包围，在学术上和技术上感觉我自己已经废了，真是绝望的要命。 回顾2019年，最美好的经历是在除夕前和老婆一起拥有了一个女儿，从此成为一个光荣的带娃男。然后在10月份不管不顾的搞出来两篇小文章，算是总算有那么一点点科学收获。此外，居然有空重读了一遍文明之光、在北京飞回广州的航班上看了一遍流浪地球。至于其他的，都是小事情了。 用学生的话讲，常老师越来越佛了。。。 嗯哼。 2020年，没有打算去交基金申请，对下一步能够解决的科学问题一点思考都没有，就不给国家浪费钱了。做好手头上的事情，是这上半年最大的意愿。 给自己立个Flag吧： 想要完成的小工作： 和小朱的合作 深圳的大任务 嘉晨的小文章 赵伟的小文章 想要尝试的新事物： UAVs&amp;ROBOTs Lidar uEMEP 想要戒掉的坏习惯： 吃夜宵 熬通宵 爆粗口","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://keenmisty.github.io/tags/Python/"},{"name":"lidar","slug":"lidar","permalink":"http://keenmisty.github.io/tags/lidar/"},{"name":"2020","slug":"2020","permalink":"http://keenmisty.github.io/tags/2020/"}]},{"title":"又是一个新学期了","slug":"newterm20190924","date":"2019-09-24T09:32:17.000Z","updated":"2020-01-03T03:04:44.113Z","comments":true,"path":"2019/09/24/newterm20190924/","link":"","permalink":"http://keenmisty.github.io/2019/09/24/newterm20190924/","excerpt":"","text":"一年多了，完全没时间写点什么。 整个人已经是随时要垮掉的状态了。 带学生带的心累，再也没有刚刚工作，刚刚成为导师时那样的冲劲，恨不得把所有自己会的东西都灌给所有的师弟师妹。然而赤裸裸的现实一直在打我脸，我越是花精力去带的学生，学的就越差。基础薄弱却不好学，磨洋工之余像一个黑洞，不作为，不反馈。哎。。。也不知道到底是谁要毕业。催一催，push一下，反倒成恶人了。 就像老板说的那样，佛系了，爱怎样怎样吧，做自己的工作就是了。 奇怪的是，放下这种为学生前途负责的心态撒手不管之后，倒是开始有了些自己的时间。 希望新的一个学期，能够有新的同路人，一起做想做的研究。","categories":[],"tags":[{"name":"learning","slug":"learning","permalink":"http://keenmisty.github.io/tags/learning/"}]},{"title":"基于python-docx生成半自动化的word报告","slug":"20180706pythondocx-md","date":"2018-07-06T07:49:47.000Z","updated":"2020-01-03T02:07:51.261Z","comments":true,"path":"2018/07/06/20180706pythondocx-md/","link":"","permalink":"http://keenmisty.github.io/2018/07/06/20180706pythondocx-md/","excerpt":"","text":"缘起：一直以来都有个需求是将固定格式的文档自动化生成，我以前曾经拿latex尝试过，效果其实很好，在linux下直接就可以生成pdf文档，非常适宜于放在服务器上。然而，可悲的现实在于，latex过于阳春白雪。要说服更多的人走出自己的舒服区掌握一项新技能，实在是一件比触动灵魂更难的事情。好在word还算是很多人都会的一个软件，而python也受到越来越多的人的青睐，我也希望走出自己的舒服区来尽量多的尝试它、学会它。 快速入门：讲真，最快的入门方式就是看它的官方文档，即：https://python-docx.readthedocs.io/en/latest/不过我想，还是有一些值得记录下来的点作为笔记留作后用： 安装python-docx的安装很简单，pip install即可。如果有anaconda的话，可以conda安装。 避免版本问题由于python有2和3的问题，所以调用module时需要针对性的进行一些修改。 1234567891011# for python 2.7reload(sys)sys.setdefaultencoding('utf-8')# for python &lt;=3.3import impimp.reload(sys) # for python &gt;=3.4import importlibimportlib.reload(sys) 设置字体python-docx使用styles.font来指定字体的设置。方式如下： 12document.styles['Normal'].font.name = u'仿宋'document.styles['Normal']._element.rPr.rFonts.set(qn('w:eastAsia'), u'仿宋') 添加分页符 1document.add_page_break() 表格 与其他数据的衔接 后期调整 待续。。。","categories":[],"tags":[]},{"title":"GLC2015土地覆被的邪门问题","slug":"glcdata0402","date":"2018-04-02T01:12:18.000Z","updated":"2020-01-03T02:07:51.261Z","comments":true,"path":"2018/04/02/glcdata0402/","link":"","permalink":"http://keenmisty.github.io/2018/04/02/glcdata0402/","excerpt":"","text":"之前更新了GLC2015的土地覆被资料到EMEP模型的输入，但是测试来测试去居然跟default的土地覆被资料模拟所得到的结果完全一致。奇哉怪哉，难道说EMEP模型模拟时landuse不起作用吗？ 这个疑问看来要花点精力去解决了。今日又遇到了另一个邪门问题，GLC2015的资料按USGS的24类体系重新分类之后，居然在东北华北出现了大面积的水体。 检查来检查去发现，GLC2015把自身的第11类设为了Herbaceous Cover，这尼玛什么鬼。。。待续。。。","categories":[],"tags":[{"name":"WRF","slug":"WRF","permalink":"http://keenmisty.github.io/tags/WRF/"},{"name":"landuse","slug":"landuse","permalink":"http://keenmisty.github.io/tags/landuse/"},{"name":"EMEP","slug":"EMEP","permalink":"http://keenmisty.github.io/tags/EMEP/"}]},{"title":"郁闷的升级","slug":"update0328","date":"2018-03-28T11:12:18.000Z","updated":"2020-01-03T02:07:51.261Z","comments":true,"path":"2018/03/28/update0328/","link":"","permalink":"http://keenmisty.github.io/2018/03/28/update0328/","excerpt":"","text":"好久没有更新博客了，天天忙各种杂事。 抽出晚饭的一点时间，本来是想升级一下hexo的版本，结果发现自己的node版本太旧无法支持升级，于是又升级node。搜索了一下以为很容易，没想到windows下又各种坑，不停的失败。还好-force选项解救了我。。。然后顺利的更新了依赖链上的每个环节。 -force，如果也可以不停的-force其他人就好了，可惜总是我才是被-force的那个。。。","categories":[],"tags":[{"name":"learning","slug":"learning","permalink":"http://keenmisty.github.io/tags/learning/"}]},{"title":"新的主题，新的开始","slug":"change0807","date":"2017-08-07T09:22:18.000Z","updated":"2020-01-03T02:07:51.261Z","comments":true,"path":"2017/08/07/change0807/","link":"","permalink":"http://keenmisty.github.io/2017/08/07/change0807/","excerpt":"","text":"趁着暑假，忙里偷闲，把主题换成了Meterial，感觉清爽了很多。同时从下个学期，正式获得了教师的身份，抛开过去，新的开始。 希望过去不再不堪回首，现在不再不堪忍受，未来不再不堪想象…","categories":[],"tags":[{"name":"learning","slug":"learning","permalink":"http://keenmisty.github.io/tags/learning/"}]},{"title":"用Doxygen+Graphviz生成WRF-Chem程序结构图","slug":"doxygen","date":"2016-10-31T06:10:00.000Z","updated":"2020-01-03T02:07:51.260Z","comments":true,"path":"2016/10/31/doxygen/","link":"","permalink":"http://keenmisty.github.io/2016/10/31/doxygen/","excerpt":"","text":"缘起做毕业论文的时候要改机制代码，并且要耦合到WRF-Chem模式里面使它生效，所以就需要搞清楚WRF-Chem的结构，以便调用和输出。 虽然可以通过长时间的看WRF-Chem源代码、debug尝试以及IDE帮忙，但有一份calling tree还是很好的，给师弟师妹们讲起来也方便很多。 因此，考虑尝试用程序结构自动分析工具Doxygen对它进行分析，用Graphviz生成出来。 Doxygen简介Doxygen是一种程序结构自动分析的工具，也是一个程序文档自动生成的工具，它的官网，具体的使用方法可以在上面找到。 由于Doxygen支持Fortran，因此，直接拿来分析WRF-Chem就很简单了，配置好输出的目录及分析的项目，设置好调用Graphviz的路径，就可以直接运行输出了。 它可以生成html版的网页说明，也可以生成LaTeX文件及pdf文档。 WRF-Chem Calling Tree物理机制-微物理过程调用： 物理机制-辐射过程调用： 物理机制-积云过程调用： 物理机制-陆面及边界层过程调用： 化学机制-化学过程调用： 后记其实真的要改机制时还是要进去一点一点的看code的，这些图也就帮助下新手理解…(说白了其实没啥用，然而做无用之事不是我辈博士生打发生命的最佳方式吗2333)","categories":[],"tags":[{"name":"WRF-Chem","slug":"WRF-Chem","permalink":"http://keenmisty.github.io/tags/WRF-Chem/"},{"name":"Doxygen","slug":"Doxygen","permalink":"http://keenmisty.github.io/tags/Doxygen/"},{"name":"Graphviz","slug":"Graphviz","permalink":"http://keenmisty.github.io/tags/Graphviz/"}]},{"title":"希望死在自己选择的道路上","slug":"latex-notepad-config","date":"2016-09-06T22:22:18.000Z","updated":"2020-01-03T02:07:51.260Z","comments":true,"path":"2016/09/07/latex-notepad-config/","link":"","permalink":"http://keenmisty.github.io/2016/09/07/latex-notepad-config/","excerpt":"","text":"读博是很痛苦的…然而却乐在其中… 如果有一天我们终将死去，我希望我是在写出答案之后死在办公台旁…","categories":[],"tags":[{"name":"learning","slug":"learning","permalink":"http://keenmisty.github.io/tags/learning/"},{"name":"thesisi","slug":"thesisi","permalink":"http://keenmisty.github.io/tags/thesisi/"}]},{"title":"NCL生成kml文件","slug":"ncl-kml","date":"2016-06-12T08:30:18.000Z","updated":"2020-01-03T02:07:51.260Z","comments":true,"path":"2016/06/12/ncl-kml/","link":"","permalink":"http://keenmisty.github.io/2016/06/12/ncl-kml/","excerpt":"","text":"简介KML(Keyhold Markup Language)是一种XML语法格式的标记语言，可以在多种应用程序中显示，包括 Google Earth、Google Map、ArcGIS(ArcMap/ArcGlobe)等，驴友们制作路书的时候也经常采用这种格式制作。 它的优势是可以把几何、符号系统、描述、属性、影像和行为等数据封装到单个源中，非常方便数据的共享和在线展示。 NCL对于KML的支持起自2013年，由Mohammad Abouali开发，他制作了一个名为 NCL_GETools 的NCL输出库，使得NCL可以将各种气象模型结果输出成KML格式，从而可以方便的在各类GIS软件中与其他地理信息数据一起进行处理，或是通过Google Earth/Map的API进行在线的展示。 NCL_GETools 需要6.2.0之后版本的NCL。 使用首先，需要在你自己的ncl脚本中声明调用这一工具： 1load &quot;$NCARG_ROOT/lib/ncarg/nclscripts/contrib/NCL_GETools.ncl&quot; 然后即可在你个人的ncl脚本中调用以下函数或者过程，来完成相应的动作： 函数 get_coordinate_system_string GetAltModeNumber read_ict squeeze get_KML_IconHref ones zeros dim_dimsizes Gray2RGBA Gray2cIndex ToHex add_KML_ColorMapStyles 过程 add_KML_Description add_KML_Address add_KML_Range add_KML_Name add_KML_Coordinates add_KML_Width add_KML_Open add_KML_FlyToView add_KML_Extrude add_KML_Visibility add_KML_Tessellate add_KML_Fill add_KML_Outline add_KML_Altitude add_KML_AltMode add_KML_Color add_KML_North add_KML_South add_KML_East add_KML_West add_KML_Rotation add_KML_StyleUrl add_KML_HideChildrenStyle hide_KML_Children add_KML_Href add_KML_Icon add_KML_Heading add_KML_TimeSpan add_KML_TimeStamp_When add_KML_LineStyle add_KML_IconStyle add_KML_PolyStyle add_KML_LineString add_KML_LatLonBox add_KML_LinearRing add_KML_OuterBoundaryIs add_KML_InnerBoundaryIs add_KML_GOverlay add_KML_Polygon add_KML_nSidedPolygon add_KML_Point Open_KML_MultiGeometry Close_KML_MultiGeometry Open_KML_Link Close_KML_Link Open_KML_NetworkLink Close_KML_NetworkLink Open_KML_Folder Close_KML_Folder Open_KML_Placemark Close_KML_Placemark Open_KML_Style Close_KML_Style Open_KML_Document Close_KML_Document OpenKML CloseKML RasterTimeSeries2KML SHP2KML Point2KML Velocity2KML Points2KML Collect_KMLs Path2KML Measurements2KML UnstructGrid2KML UnstructData2KML UnstructVelocity2KML 例子 Point2KML的使用 新增一个文件名为 1.ncl 的脚本，内容如下： 12345678910111213load &quot;$NCARG_ROOT/lib/ncarg/nclscripts/contrib/NCL_GETools.ncl&quot;begin ; 设置图层属性 Opt=True Opt@Name=&quot;Dihuan Building&quot; Opt@Lat=23.103685 Opt@Lon=113.294506 Opt@Description=&quot;School of Atmospheric Science, Sun yat-sen University&quot; Opt@Verbose=True; 设置输出 kml_FileName=&quot;sysu_sas_building&quot; Point2KML(kml_FileName, Opt)end 执行这个ncl，即可得到一个名为 sysu_sas_building.kml 的文件，把它放入GoogleEarth中，即可看到如下的样子(当然，首先要能加载出来GE中的地球，否则需要首先翻下墙)： 其他值得注意的事情 Ryan Pavlick制作了一个更深入的ncl制作kml的库，link 更推荐使用ArcGIS等地理信息系统工具处理kml文件","categories":[],"tags":[{"name":"ncl","slug":"ncl","permalink":"http://keenmisty.github.io/tags/ncl/"},{"name":"kml","slug":"kml","permalink":"http://keenmisty.github.io/tags/kml/"}]},{"title":"收集的一些LiDAR数据库","slug":"lidar-data","date":"2016-06-01T07:30:18.000Z","updated":"2020-01-03T02:07:51.260Z","comments":true,"path":"2016/06/01/lidar-data/","link":"","permalink":"http://keenmisty.github.io/2016/06/01/lidar-data/","excerpt":"","text":"一些LiDAR数据： 大气重要参数高分辨率垂直分布探查数据库http://atmosdb.aiofm.ac.cn/ Lidar Group of ABChttp://lidar.abct.lmd.polytechnique.fr 六一儿童节快乐…","categories":[],"tags":[{"name":"lidar","slug":"lidar","permalink":"http://keenmisty.github.io/tags/lidar/"},{"name":"data","slug":"data","permalink":"http://keenmisty.github.io/tags/data/"}]},{"title":"NotePad++编辑LaTeX文档的高亮及自动编译配置","slug":"latex-notepad-config","date":"2016-05-11T16:22:18.000Z","updated":"2020-01-03T02:07:51.259Z","comments":true,"path":"2016/05/12/latex-notepad-config/","link":"","permalink":"http://keenmisty.github.io/2016/05/12/latex-notepad-config/","excerpt":"","text":"NotePad++高亮显示LaTeX注释NOTEPAD++是一个相当优秀的文本编辑器，支持多种编程、脚本和标记语言的语法高亮显示和代码折叠。 它原生支持TeX的语法高亮，只需要在工具栏中依次选中“语言-T-Tex”即可。 然而有人发现这个高亮对于注释而言只是第一个%符号，后面仍然跟正文一样。 我看了一下，这个其实解决起来很简单，在“设置-语言格式设置”中对它的色彩样式进行修改就好了。 选中语言TeX，样式DEFAULT，把它的前景色改变即可。 自动编译首先需要安装一个插件NppExec，安装好之后，使用F6快捷键，在弹出来的命令框中输入以下命令： 123456cd $(CURRENT_DIRECTORY)~\\xelatex.exe $(NAME_PART).tex $EXIT~\\bibtex.exe $(NAME_PART).tex $EXIT~\\xelatex.exe $(NAME_PART).tex $EXIT~\\xelatex.exe $(NAME_PART).tex $EXIT~\\SumatraPDF.exe $(NAME_PART).pdf 其中，~是这些exe的路径。 可以把上述命令用 save… 起一个名字保存起来，下次还可以再重复调用。 效果棒棒哒：$\\color{red}{E=mc^2}$","categories":[],"tags":[{"name":"LaTeX","slug":"LaTeX","permalink":"http://keenmisty.github.io/tags/LaTeX/"},{"name":"learning","slug":"learning","permalink":"http://keenmisty.github.io/tags/learning/"}]},{"title":"获取机场实时气象报告方法","slug":"get-airport-weather","date":"2016-04-18T06:45:00.000Z","updated":"2020-01-03T02:07:51.259Z","comments":true,"path":"2016/04/18/get-airport-weather/","link":"","permalink":"http://keenmisty.github.io/2016/04/18/get-airport-weather/","excerpt":"","text":"最近坐飞机的时候总是遇到下雨，延误的很凄惨。坐在候机厅里问当班空姐吧，其实她们也不知道。于是乎还是发挥咱半吊子的气象专业特长，找找看有没有什么办法获取机场气象站的实时报告。 手机端app：手机端的天气app看起来挺多的，但是提供每十五分钟电文的少之又少。航旅纵横或是飞常准虽然有这功能吧，但要么需要业内认证，要么需要花钱搞专业版。找来找去，发现Flight Meteo这个app是可以提供各个机场的METAR和TAF的。 电脑端：用电脑的话那就办法多多了，各种网站一堆一堆的。然而没有那么多流量的时候，我还是更喜欢用脚本或者命令来获取。 这里安利两个办法，一个是weather-util，一个是python-metar。 python-metar可以从pyhton-metar下载到。各位如果要结合python做批量获取，就在这个基础上改改改就好啦。 而如果像我一样只是在候机的时候查所在机场的气象报文，那么weather-util更合适。它的安装很简单，直接sudo apt-get install weather-util就可以安装好。而使用嘛，安装好之后一句命令即可： weather &lt;code&gt; 其中，&lt;code&gt;是机场的ICAO代码，比如说广州就是ZGGG，北京就是ZBAA。 在这里可以查询全球机场的四字码。 weather-util查到的结果就像这样： 123456789admin@ubuntu:~$ weather ZGGGSearching via station...[caching result Guangzhou, China]Current conditions at Guangzhou, China (ZGGG) 23-10N 113-20E 42MLast updated Apr 18, 2016 - 07:00 AM EDT / 2016.04.18 1100 UTCTemperature: 77 F (25 C)Relative Humidity: 65%Wind: CalmSky conditions: mostly cloudy 如果需要看METAR电文的话，可以weather -v &lt;code&gt;，那么输出的结果会变为：1234567891011121314admin@ubuntu:~$ weather -v ZGGGSearching via station...[caching result Guangzhou, China]Guangzhou, China (ZGGG) 23-10N 113-20E 42MApr 18, 2016 - 07:00 AM EDT / 2016.04.18 1100 UTCWind: Calm:0Visibility: greater than 7 mile(s):0Sky conditions: mostly cloudyTemperature: 77 F (25 C)Dew Point: 64 F (18 C)Relative Humidity: 65%Pressure (altimeter): 29.94 in. Hg (1014 hPa)ob: ZGGG 181100Z 00000MPS 9999 BKN060 25/18 Q1014 NOSIGcycle: 11 其中，ob这一行就是。 可以看到现在广州白云机场的能见度很好，也没有下雨。那飞机很快就可以起飞咯，再也不去骚扰坐台的空姐了^_^","categories":[],"tags":[{"name":"Learning","slug":"Learning","permalink":"http://keenmisty.github.io/tags/Learning/"},{"name":"python","slug":"python","permalink":"http://keenmisty.github.io/tags/python/"}]},{"title":"WRF-CMAQ基本概述","slug":"cmaq-learn","date":"2016-03-17T15:02:00.000Z","updated":"2020-01-03T02:07:51.259Z","comments":true,"path":"2016/03/17/cmaq-learn/","link":"","permalink":"http://keenmisty.github.io/2016/03/17/cmaq-learn/","excerpt":"","text":"WRF-CMAQ空气质量模式系统空气污染预报概念空气污染预报是基于污染排放源（包含排放源清单及实时监测数据）、气象数据，通过耦合了物理、化学机制的空气质量模型进行预测的过程。 CMAQ历史CMAQ是美国1997年发布的第三代空气质量模型，它是美国环保局开发的用来模拟空气质量运算的开源项目。 90年代开始，随着计算机性能的增强，特别是高性能计算与通信计划的实施，更复杂的考虑多种大气过程、多尺度的空气质量模式的开发工作在美国展开。模式中需要考虑多种排放源，如工业、电厂、交通、生物排放等过程，研究的污染物和污染问题包括首要污染物、臭氧、颗粒物、能见度、酸沉降等。９０年代末开发的代表目前国际领先水平的综合多尺度空气质量模式Models-3/CMAQ（Community Multi-scale Air Quality），本着“一个大气”（One Atomosphere）的设计理念，融入了许多当前大气化学和大气环境领域的最新研究成果，将区域对流层大气作为整体，周密的考虑所有已知的物理和化学过程，综合考虑了不同物种之间的相互影响与转化， 最大限度的模拟真实的大气环境，可用于局地到区域多种尺度光化学烟雾，区域酸沉降、大气颗粒物质等大气污染问题的理论研究与业务预报。Models-3为Third-Generation量模式三部分组成。其核心是Community Air Quality Modeling System的通称，由中尺度气象模式、污染排放模式和多尺度空气质量模式系统，所以也可以称其为Models-3/CMAQ模式。 CMAQ的最大特色在一个大气（One-Atmosphere）的观念，打破了传统模式对单一物种的模拟。将复杂的空气污染情况如对流层的臭氧、PM、有毒物质、酸沉降及能见度等问题综合处理，用于多尺度、多污染物的空气质量预报、评估和决策政策等多种途径。美国环保局研制的未来第四代空气质量模型系统，将尽可能考虑气圈、永圈、和生物圈之闯的互相作用，以便提供一个更加全面的方法对整个 生态系统中的污染物的输送和消亡过程进行预报和评估。 CMAQ是目前国际领先水平的空气质量模型系统。有关质量预报和评估系统 MM5/WRF-CMAQ耦合模式组成 气象驱动部分： MM5：MM5模式是由美国大气研究中心(NCAR)和美国宾州大学(PSU)在MM4模式基础上联合研制并发展起来的，是较先进的中尺度气象数值预报模式之一，已被广泛应用于各种中尺度现象的研究 WRF：WRF（Weather Research and Forecasting Model）模式是由美国环境预测中心NCEP,美国国家大气研究中心NCAR等美国科研机构中心着手开发的一种统一的中尺度天气预报模式。模式分为ARW(the Advanced Research WRF)和NMM(the Nonhydrostatic Mesoscale Model)两种，即研究用和业务用两种形式。 主要设置内容：模拟区域网格资料（网格大小、网格尺寸等）；模拟时间（Julia Date ）；垂直分层（Sigma Layer 为分层基准）；下垫面资料（土地利用、土壤、地形等）；气温、气压等气象资料；物理参数化方案组合； 源处理部分： SMOKE包含固定源、移动源、面源、生物源四大处理模块 CMAQ化学部分： 初始值模块(Initial conditions processor, ICON)； 边界值模块(Boundary conditions processor, BCON)； 光解速率常数模块(Photolysis rate processor, JPROC)； 化学反应机制处理(Chemical-transport model processor, CCTM) 垂直对流效应； 水平对流效应； 垂直扩散效应； 水平扩散效应； 云程序机制； 气象化学反应机制； 液相化学反应机制； 云混合模型机制； 气悬胶动力与粒径机制； 烟流化学效应； 干沉降机制； 模式流程分析模块；","categories":[],"tags":[{"name":"Learning","slug":"Learning","permalink":"http://keenmisty.github.io/tags/Learning/"},{"name":"WRF","slug":"WRF","permalink":"http://keenmisty.github.io/tags/WRF/"},{"name":"CMAQ","slug":"CMAQ","permalink":"http://keenmisty.github.io/tags/CMAQ/"}]},{"title":"GIS中Python的使用<1>","slug":"GISPython-learn","date":"2016-02-15T05:02:00.000Z","updated":"2020-01-03T02:07:51.258Z","comments":true,"path":"2016/02/15/GISPython-learn/","link":"","permalink":"http://keenmisty.github.io/2016/02/15/GISPython-learn/","excerpt":"","text":"GIS Modeling与Python介绍 ArcGIS中提供了两种写Python的方式： ModelBuilder IDLE ModelBuilder的使用很简单，可以先拿来做模型的结构设计。但是一些复杂的处理则需要写Python Script来实现。 因此： Using Python window in ArcGIS： 12import arcpyarcpy.Buffer_analysis(\"us_cities\", \"us_cities_buffered\", \"15 miles\", \"\", \"\", \"ALL\") 注意：所有需要调用ArcGIS的Tools的脚本，都需要import arcpy 比如打印feature的空间参考： 123456789101112# Opens a feature class from a geodatabase and prints the spatial reference import arcpy featureClass = \"C:/Data/USA/USA.gdb/StateBoundaries\" # Describe the feature class and get its spatial reference desc = arcpy.Describe(featureClass)spatialRef = desc.spatialReference # Print the spatial reference nameprint spatialRef.Name 参考: Python Scripting for ArcGIS by Paul A. Zandbergen","categories":[],"tags":[{"name":"Learning","slug":"Learning","permalink":"http://keenmisty.github.io/tags/Learning/"},{"name":"ArcGIS","slug":"ArcGIS","permalink":"http://keenmisty.github.io/tags/ArcGIS/"},{"name":"Python","slug":"Python","permalink":"http://keenmisty.github.io/tags/Python/"}]},{"title":"Noah-MP Learning","slug":"20160202-sth-md","date":"2016-02-02T10:34:15.000Z","updated":"2020-01-03T02:07:51.258Z","comments":true,"path":"2016/02/02/20160202-sth-md/","link":"","permalink":"http://keenmisty.github.io/2016/02/02/20160202-sth-md/","excerpt":"","text":"The NoahMP calling tree Init noahmp_options NOAHMP_SFLX REDPRM FRH2O Run1234567891011121314151617181920212223242526272829303132333435363738394041424344454647ATMPHENOLOGYENERGY THERMOPROP CSNOW TDFCND RADIATION ALBEDO SNOW\\_AGE SNOWALB\\_BATS SNOWALB\\_CLASS GROUNDALB TWOSTREAM SURRAD VEGE\\_FLUX SFCDIF1 SFCDIF2 STOMATA CANRES ESAT RAGRB BARE\\_FLUX TSNOSOI HRT HSTEP ROSR12 PHASECHANGEWATER CANWATER SNOWWATER SNOWFALL COMBINE DIVIDE COMBO COMPACT SNOWH2O SOILWATER ZWTEQ INFIL SRT WDFCND1 WDFCND2 SSTEP GROUNDWATERCARBON CO2FLUXERROR","categories":[],"tags":[{"name":"Learning","slug":"Learning","permalink":"http://keenmisty.github.io/tags/Learning/"},{"name":"Fortran","slug":"Fortran","permalink":"http://keenmisty.github.io/tags/Fortran/"},{"name":"NoahMP","slug":"NoahMP","permalink":"http://keenmisty.github.io/tags/NoahMP/"}]},{"title":"建站说明","slug":"blog-building","date":"2016-01-26T15:16:00.000Z","updated":"2020-01-03T02:07:51.258Z","comments":true,"path":"2016/01/26/blog-building/","link":"","permalink":"http://keenmisty.github.io/2016/01/26/blog-building/","excerpt":"","text":"建设这个站点，用来整理以前积攒的知识，用来学习还没有掌握的知识。 顺便用来记录生活，记录成长。 开博缘由: 在建立改造博客网站的过程中，学习和巩固基本知识；通过写博客的方式，加深理解，显性化自己的隐性知识；共享知识，吸引同好，交流进步。 一些个人相关信息和经验: 非计算机类专业，编程经验基本为零； 能流畅阅读大部分英文资料； 经常折腾各种系统、软件和手机 APP； 善用利用搜索解决各类问题； 追求“混乱”，并不喜欢变得井井有条。 欢迎交流: 个人邮件及社交网站等信息见边栏底部；有什么留言或问题直接在文末留下评论即可。","categories":[],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://keenmisty.github.io/tags/GitHub/"},{"name":"Hexo","slug":"Hexo","permalink":"http://keenmisty.github.io/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"http://keenmisty.github.io/tags/Markdown/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-01-26T13:05:00.000Z","updated":"2020-01-03T02:07:51.300Z","comments":true,"path":"2016/01/26/hello-world/","link":"","permalink":"http://keenmisty.github.io/2016/01/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}